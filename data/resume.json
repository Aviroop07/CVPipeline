{
  "basics": {
    "name": "Aviroop Mitra",
    "label": "IISc CSA'27 • GATE CS AIR 65 (CS) • BE CSE, Jadavpur University, 2025",
    "email": "aviroopmitra5@gmail.com",
    "phone": "+91 79809 58951",
    "location": "India",
    "public_id": "aviroopmitra071003"
  },
  "work": [
    {
      "name": "Neurologic-ai",
      "position": "Machine Learning Intern",
      "location": "Kolkata, West Bengal, India",
      "startDate": "2023-11",
      "endDate": "2025-07",
      "summary": "Intelligent Claim Orchestration in Guideware — Skan AI | May–Jun 2025\nAutomated claim creation and assignment in Guidewire ClaimCenter with a vision-to-reasoning pipeline that pairs GPT-4 Vision/Text (async Python, prompt-engineered with token-cost guardrails) and a hierarchical scorer operating on a 30-event window. Delivered 80% confidence (+23 pts over benchmark) and halved inference latency.\n\nDocument Intelligence Platform — Carelon Health | Mar–May 2025\nStreamlit-based interface drives a PDF-to-image flow where a layout-transformer isolates semantic zones; cropped sections are passed to async GPT-4 Vision (backed by Mistral OCR and Python imaging) and rendered with Pandas. The generalized architecture now ingests diverse healthcare documents and keeps end-to-end latency under 3s without sacrificing accuracy.",
      "url": "https://www.linkedin.com/company/neurologicai/",
      "public_id": "neurologicai",
      "extracted_projects": [
        {
          "title": "Intelligent Claim Orchestration in Guideware",
          "company": "Skan AI",
          "duration": {
            "start": {
              "day": null,
              "month": 5,
              "year": 2025
            },
            "end": {
              "day": null,
              "month": 6,
              "year": 2025
            }
          },
          "description": "Automated claim creation and assignment in Guidewire ClaimCenter with a vision-to-reasoning pipeline that pairs GPT-4 Vision/Text (async Python, prompt-engineered with token-cost guardrails) and a hierarchical scorer operating on a 30-event window. Delivered 80% confidence (+23 pts over benchmark) and halved inference latency.",
          "tech_highlights": [
            "Guidewire ClaimCenter",
            "GPT-4 Vision/Text",
            "async Python",
            "prompt-engineered",
            "token-cost guardrails",
            "hierarchical scorer",
            "80% confidence",
            "+23 pts over benchmark",
            "halved inference latency"
          ]
        },
        {
          "title": "Document Intelligence Platform",
          "company": "Carelon Health",
          "duration": {
            "start": {
              "day": null,
              "month": 3,
              "year": 2025
            },
            "end": {
              "day": null,
              "month": 5,
              "year": 2025
            }
          },
          "description": "Streamlit-based interface drives a PDF-to-image flow where a layout-transformer isolates semantic zones; cropped sections are passed to async GPT-4 Vision (backed by Mistral OCR and Python imaging) and rendered with Pandas. The generalized architecture now ingests diverse healthcare documents and keeps end-to-end latency under 3s without sacrificing accuracy.",
          "tech_highlights": [
            "Streamlit",
            "layout-transformer",
            "GPT-4 Vision",
            "Mistral OCR",
            "Python",
            "Pandas",
            "3s"
          ]
        }
      ],
      "points": [
        "Intelligent Claim Orchestration in Guideware — Skan AI | May–Jun 2025",
        "Automated claim creation and assignment in Guidewire ClaimCenter with a vision-to-reasoning pipeline that pairs GPT-4 Vision/Text (async Python, prompt-engineered with token-cost guardrails) and a hierarchical scorer operating on a 30-event window. Delivered 80% confidence (+23 pts over benchmark) and halved inference latency.",
        "Document Intelligence Platform — Carelon Health | Mar–May 2025",
        "Streamlit-based interface drives a PDF-to-image flow where a layout-transformer isolates semantic zones; cropped sections are passed to async GPT-4 Vision (backed by Mistral OCR and Python imaging) and rendered with Pandas. The generalized architecture now ingests diverse healthcare documents and keeps end-to-end latency under 3s without sacrificing accuracy."
      ],
      "period": "Nov, 2023 – Jul, 2025"
    },
    {
      "name": "PwC India",
      "position": "Advisory Intern",
      "location": "Kolkata, West Bengal, India",
      "startDate": "2024-06",
      "endDate": "2024-07",
      "summary": "Full-Stack Ticket Platform | Jun–Jul 2024\nAngular + Spring Boot + MongoDB stack with JWT-secured role-based access. Provides a real-time ticket dashboard, template creation/search, appraisal & query threads, and an animated UI—while keeping CRUD latency under 50 ms. An API Gateway and client-side service discovery route traffic to horizontally duplicated ticket and auth services for effortless scale-out.",
      "url": "http://www.pwc.com",
      "public_id": "m/012_78",
      "extracted_projects": [
        {
          "title": "Full-Stack Ticket Platform",
          "company": null,
          "duration": {
            "start": {
              "day": null,
              "month": 6,
              "year": 2024
            },
            "end": {
              "day": null,
              "month": 7,
              "year": 2024
            }
          },
          "description": "Angular + Spring Boot + MongoDB stack with JWT-secured role-based access. Provides a real-time ticket dashboard, template creation/search, appraisal & query threads, and an animated UI—while keeping CRUD latency under 50 ms. An API Gateway and client-side service discovery route traffic to horizontally duplicated ticket and auth services for effortless scale-out.",
          "tech_highlights": [
            "Angular",
            "Spring Boot",
            "MongoDB",
            "JWT",
            "50 ms"
          ]
        }
      ],
      "points": [
        "Full-Stack Ticket Platform | Jun–Jul 2024",
        "Angular + Spring Boot + MongoDB stack with JWT-secured role-based access. Provides a real-time ticket dashboard, template creation/search, appraisal & query threads, and an animated UI—while keeping CRUD latency under 50 ms. An API Gateway and client-side service discovery route traffic to horizontally duplicated ticket and auth services for effortless scale-out."
      ],
      "period": "Jun – Jul, 2024"
    }
  ],
  "education": [
    {
      "institution": "Jadavpur University",
      "area": "Computer Science and Engineering",
      "studyType": "Bachelor of Engineering - BE (Hons.)",
      "score": "8.25 (76.3%)",
      "startDate": "2021-12",
      "endDate": "2025-07",
      "url": "",
      "public_id": "",
      "period": "Dec, 2021 – Jul, 2025"
    },
    {
      "institution": "Burdwan Municipal High School",
      "area": "Science",
      "studyType": "Higher Secondary ",
      "score": "O (93.4%)",
      "startDate": "2019-07",
      "endDate": "2021-03",
      "url": "http://www.bmhschool.com/",
      "public_id": "m/0b3xpm",
      "period": "Jul, 2019 – Mar, 2021"
    },
    {
      "institution": "Burdwan Town School",
      "area": "",
      "studyType": "Secondary",
      "score": "AA (95.14%)",
      "startDate": "2011-01",
      "endDate": "2019-03",
      "url": "",
      "public_id": "",
      "period": "Jan, 2011 – Mar, 2019"
    }
  ],
  "awards": [
    {
      "title": "GATE CS, 2025",
      "date": "Feb, 2025",
      "awarder": "",
      "summary": "AIR 65, 99.96 percentile",
      "url": ""
    },
    {
      "title": "Senior Scholar",
      "date": "Jul, 2022",
      "awarder": "Jagadish Bose National Science Talent Search",
      "summary": "98.98 percentile",
      "url": ""
    },
    {
      "title": "Junior Scholar",
      "date": "Mar, 2020",
      "awarder": "Jagadish Bose National Science Talent Search",
      "summary": "98.5 percentile",
      "url": ""
    }
  ],
  "projects": [
    {
      "name": "CVPipeline",
      "description": "# Resume Generation Pipeline\r\n\r\nAn intelligent, automated resume generation system that transforms LinkedIn profile data into professional, AI-enhanced resumes with validated URLs and multiple output ...",
      "startDate": "2024-07",
      "endDate": "2025-07",
      "url": "https://github.com/Aviroop07/CVPipeline",
      "points": [
        {
          "text": "Implemented 6-step pipeline using linkedin-api, OpenAI, Google Knowledge Graph API, PyGithub and Playwright to fetch, enhance, validate and output HTML/PDF resumes.",
          "highlights": [
            "6-step",
            "linkedin-api",
            "OpenAI",
            "Google Knowledge Graph API",
            "PyGithub",
            "Playwright",
            "HTML",
            "PDF"
          ]
        },
        {
          "text": "Integrated httpx with SQLite caching (24-hour TTL) to validate URLs and avoid redundant API calls.",
          "highlights": [
            "httpx",
            "SQLite",
            "24-hour TTL"
          ]
        },
        {
          "text": "Developed AI processor with OpenAI API for skill filtering and tech highlighting from LinkedIn and GitHub data.",
          "highlights": [
            "OpenAI API",
            "LinkedIn",
            "GitHub"
          ]
        },
        {
          "text": "Designed configurable styling system via Python and CSS for responsive HTML, high-quality PDF conversion and centralized layout management.",
          "highlights": [
            "Python",
            "CSS",
            "HTML"
          ]
        }
      ],
      "period": "Jul, 2024 – Jul, 2025",
      "commit_count": 81
    },
    {
      "name": "VARC_APP",
      "description": "# Daily Article Selector\n\nA Streamlit application that selects a random article daily from The Hindu or The Telegraph based on specified topic probabilities:\n\n- Business and economics (20%)\n- Science,...",
      "startDate": "2025-04",
      "endDate": "2025-04",
      "url": "https://github.com/Aviroop07/VARC_APP",
      "points": [
        {
          "text": "Implemented a Streamlit app with structured UI components and scrapers for The Hindu and The Telegraph, leveraging BeautifulSoup and requests.",
          "highlights": [
            "Streamlit",
            "BeautifulSoup",
            "requests"
          ]
        },
        {
          "text": "Configured topic-based probability distribution (Business 20%, Science, Environment, and Technology 50%, Art and Literary Criticism 20%, Philosophy and Sociology 10%) to select one article daily.",
          "highlights": [
            "20%",
            "50%",
            "20%",
            "10%"
          ]
        },
        {
          "text": "Organized code into app/components, app/scrapers, app/utils, and main.py with cached article storage in a data directory.",
          "highlights": [
            "app/components",
            "app/scrapers",
            "app/utils",
            "main.py",
            "cached article storage",
            "data directory"
          ]
        },
        {
          "text": "Managed dependencies via pip with requirements.txt for streamlined deployment.",
          "highlights": [
            "pip",
            "requirements.txt"
          ]
        }
      ],
      "period": "Apr, 2025",
      "commit_count": 20
    },
    {
      "name": "distributed-p2p-network",
      "description": "# Distributed Text Processing System\n\nA distributed system for processing and analyzing text data using multiple nodes for computation and storage.\n\n## System Architecture\n\nThe system consists of thre...",
      "startDate": "2025-03",
      "endDate": "2025-03",
      "url": "https://github.com/Aviroop07/distributed-p2p-network",
      "points": [
        {
          "text": "Developed a distributed text processing system in Python 3.8 with virtualenv and pip managing 5 Main, 10 Data, and 10 Compute Nodes.",
          "highlights": [
            "Python 3.8",
            "virtualenv",
            "pip",
            "5 Main",
            "10 Data",
            "10 Compute Nodes"
          ]
        },
        {
          "text": "Configured Main Nodes (8000–8999) for coordination and load balancing, Data Nodes (9000–9999) for replication, and Compute Nodes (10000–10999) for embedding and semantic search via Python scripts.",
          "highlights": [
            "8000–8999",
            "9000–9999",
            "10000–10999",
            "Python"
          ]
        },
        {
          "text": "Implemented chunk-based storage, data persistence, health monitoring, and load balancing across 25 nodes using Python services.",
          "highlights": [
            "chunk-based storage",
            "data persistence",
            "health monitoring",
            "load balancing",
            "25 nodes",
            "Python"
          ]
        }
      ],
      "period": "Mar, 2025",
      "commit_count": 1
    }
  ],
  "skills": [
    {
      "name": "Python"
    },
    {
      "name": "C++"
    },
    {
      "name": "Java"
    },
    {
      "name": "JavaScript"
    },
    {
      "name": "C"
    },
    {
      "name": "SQL"
    },
    {
      "name": "Machine Learning"
    },
    {
      "name": "Deep Learning"
    },
    {
      "name": "Natural Language Processing (NLP)"
    },
    {
      "name": "Large Language Models (LLM)"
    },
    {
      "name": "Transformers"
    },
    {
      "name": "Prompt Engineering"
    },
    {
      "name": "OpenAI API"
    },
    {
      "name": "REST APIs"
    },
    {
      "name": "FastAPI"
    },
    {
      "name": "Spring Boot"
    },
    {
      "name": "Angular"
    },
    {
      "name": "Node.js"
    },
    {
      "name": "MySQL"
    },
    {
      "name": "MongoDB"
    },
    {
      "name": "pytest"
    },
    {
      "name": "Git"
    },
    {
      "name": "Pandas (Software)"
    },
    {
      "name": "Scikit-Learn"
    },
    {
      "name": "NumPy"
    },
    {
      "name": "Jupyter"
    },
    {
      "name": "Data Structures"
    },
    {
      "name": "Algorithms"
    },
    {
      "name": "Graph Theory"
    },
    {
      "name": "Object-Oriented Programming (OOP)"
    }
  ],
  "languages": [
    {
      "language": "Bengali",
      "fluency": "NATIVE_OR_BILINGUAL"
    },
    {
      "language": "English",
      "fluency": "PROFESSIONAL_WORKING"
    },
    {
      "language": "French",
      "fluency": "ELEMENTARY"
    }
  ],
  "skills_by_category": {
    "Programming Languages": [
      "Python",
      "C++",
      "Java",
      "JavaScript",
      "C",
      "SQL"
    ],
    "Machine Learning & AI": [
      "Machine Learning",
      "Deep Learning",
      "Natural Language Processing (NLP)",
      "Large Language Models (LLM)",
      "Transformers",
      "Prompt Engineering"
    ],
    "APIs & Frameworks": [
      "OpenAI API",
      "REST APIs",
      "FastAPI",
      "Spring Boot",
      "Angular",
      "Node.js"
    ],
    "Databases & Data Storage": [
      "MySQL",
      "MongoDB"
    ],
    "Tools & Libraries": [
      "pytest",
      "Git",
      "Pandas (Software)",
      "Scikit-Learn",
      "NumPy",
      "Jupyter"
    ],
    "Computer Science Fundamentals": [
      "Data Structures",
      "Algorithms",
      "Graph Theory",
      "Object-Oriented Programming (OOP)"
    ]
  }
}